from fsm import *
import unittest

class TestFSM(unittest.TestCase):
    def testBasicFunctionality(self):
        stringmatch = FSM()
        stringmatch.setstartstate("My Start State")
        self.assertIsNone(stringmatch._startstate)
        stringmatch.addstate("My Start State")
        stringmatch.setstartstate("My Start State")
        self.assertEqual(stringmatch._startstate, "My Start State")
        self.assertTrue(len(stringmatch._states_and_trans)==1)
        stringmatch.addstate("Second State")
        stringmatch.addtransition("My Start State", "Second State", "a")
        stringmatch.addtransition("My Start State", "Second State", "a")
        self.assertTrue(len(stringmatch._states_and_trans["My Start State"])==1)
        stringmatch.addtransition("Second State", "My Start State", "a")
        self.assertEqual(len(stringmatch._states_and_trans["Second State"]), 1)
    def test_accept1(self):
        stringmatch = FSM()
        for state in ['1', '2', '3', '4', '5', '6']:
            stringmatch.addstate(state)
        stringmatch.setstartstate('1')
        stringmatch.setacceptstate('5')
        stringmatch.setacceptstate('6')
        stringmatch.addtransition('1', '2', 'c')
        stringmatch.addtransition('2', '3', 'a')
        stringmatch.addtransition('3', '6', 't')
        stringmatch.addtransition('2', '4', 'a')
        stringmatch.addtransition('4', '5', 'r')
        self.assertTrue(stringmatch.accepts('cat'))
        self.assertFalse(stringmatch.accepts('ca'))
        self.assertFalse(stringmatch.accepts('tac'))
        self.assertTrue(stringmatch.accepts('car'))
        self.assertFalse(stringmatch.accepts('cam'))
    def test_all_end_vertices_same_true(self):
        q = DequeSet()
        q.enqueue((2,4))
        q.enqueue((5,4))
        q.enqueue((8,4))
        self.assertTrue(all_end_vertices_same(q, 4))
    def test_all_end_vertices_same_false(self):
        q = DequeSet()
        q.enqueue((2,9))
        q.enqueue((5,3))
        q.enqueue((8,12))
        self.assertFalse(all_end_vertices_same(q, 9))
    def test_debug(self):
        q = DequeSet()
        q.enqueue((6,3))
        ls = list('cat')
        length = len(ls)
        self.assertTrue(all_end_vertices_same(q, length))
    def test_highly_connected(self):
        m = FSM()
        m.addstate('a')
        m.addstate('b')
        m.addstate('c')
        m.addstate('d')
        m.addtransition('a', 'b', '0')
        m.addtransition('a', 'b', '1')
        m.addtransition('a', 'c', '0')
        m.addtransition('a', 'c', '1')
        m.addtransition('a', 'd', '0')
        m.addtransition('a', 'd', '1')
        m.addtransition('b', 'a', '0')
        m.addtransition('b', 'a', '1')
        m.addtransition('b', 'c', '0')
        m.addtransition('b', 'c', '1')
        m.addtransition('b', 'd', '0')
        m.addtransition('b', 'd', '1')
        m.addtransition('c', 'a', '0')
        m.addtransition('c', 'a', '1')
        m.addtransition('c', 'b', '0')
        m.addtransition('c', 'b', '1')
        m.addtransition('c', 'd', '0')
        m.addtransition('c', 'd', '1')
        m.addtransition('d', 'a', '0')
        m.addtransition('d', 'a', '1')
        m.addtransition('d', 'b', '0')
        m.addtransition('d', 'b', '1')
        m.addtransition('d', 'c', '0')
        m.addtransition('d', 'c', '1')
        m.setstartstate('a')
        assert(m.accepts('00000') == False)
        m.setacceptstate('b')
        assert(m.accepts('00000') == True)
        assert(m.accepts('01010101010') == True)
        assert(m.accepts('010101010120') == False)
        assert(m.accepts('010101010000000000000000000000000011100010') == True)
    def test_mimir(self):
        M = FSM()
        M.addstate('allones')
        M.addstate('fail')
        M.addtransition('allones', 'allones', '1')
        M.addtransition('allones', 'fail', '0')
        M.addtransition('fail', 'fail', '0')
        M.addtransition('fail', 'fail', '1')
        M.setstartstate('allones')
        M.setacceptstate('allones')
        assert(M.accepts(''))
        assert(M.accepts('1'))
        assert(M.accepts('11111111'))
        assert(not M.accepts('11111110'))
        assert(not M.accepts('0'))
if __name__ == '__main__':
    unittest.main()
